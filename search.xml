<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux常用命令全拼]]></title>
    <url>%2F2019%2F08%2F08%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%A8%E6%8B%BC%2F</url>
    <content type="text"><![CDATA[菜鸟教程pwd: print work directory 打印当前目录 显示出当前工作目录的绝对路径ps: process status(进程状态，类似于windows的任务管理器)常用参数：－auxfps -auxf 显示进程状态df: disk free 其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。du: Disk usagerpm：即RedHat Package Management，是RedHat的发明之一rmdir：Remove Directory（删除目录）rm：Remove（删除目录或文件）cat: concatenate 连锁cat file1file2&gt;&gt;file3 把文件1和文件2的内容联合起来放到file3中insmod: install module,载入模块ln -s : link -soft 创建一个软链接，相当于创建一个快捷方式mkdir：Make Directory(创建目录)touch: touchman: Manualsu：Swith user(切换用户)cd：Change directoryls：List filesps：Process Statusmkdir：Make directoryrmdir：Remove directorymkfs: Make file systemfsck：File system checkuname: Unix namelsmod: List modulesmv: Move filerm: Remove filecp: Copy fileln: Link filesfg: Foregroundbg: Backgroundchown: Change ownerchgrp: Change groupchmod: Change modeumount: Unmountdd: 本来应根据其功能描述&quot;Convert an copy&quot;命名为&quot;cc&quot;，但&quot;cc&quot;已经被用以代表&quot;CComplier&quot;，所以命名为&quot;dd&quot;tar：Tape archive （磁带档案）ldd：List dynamic dependenciesinsmod：Install modulermmod：Remove modulelsmod：List module&lt;!--more--&gt;文件结尾的&quot;rc&quot;（如.bashrc、.xinitrc等）：Resource configurationKnnxxx /Snnxxx（位于rcx.d目录下）：K（Kill）；S(Service)；nn（执行顺序号）；xxx（服务标识）.a（扩展名a）：Archive，static library.so（扩展名so）：Shared object，dynamically linked library.o（扩展名o）：Object file，complied result of C/C++ source fileRPM：Red hat package managerdpkg：Debian package managerapt：Advanced package tool（Debian或基于Debian的发行版中提供）其他 Linux 命令缩写bin = Binaries (二进制文件)/dev = Devices (设备)/etc = Etcetera (等等)/lib = LIBrary/proc = Processes/sbin = Superuser Binaries (超级用户的二进制文件)/tmp = Temporary (临时)/usr = Unix Shared Resources/var = Variable (变量)FIFO = First In, First OutGRUB = GRand Unified BootloaderIFS= Internal Field SeperatorsLILO = LInux LOaderMySQL = My 是最初作者女儿的名字，SQL = Structured QueryLanguagePHP = Personal Home Page Tools = PHP HypertextPreprocessorPS = Prompt StringPerl = “Pratical Extraction and Report Language”(实际的抽取和报告语言) =”Pathologically Eclectic Rubbish Lister”Python 得名于电视剧Monty Python’s Flying CircusTcl = Tool Command LanguageTk = ToolKitVT = Video TerminalYaST = Yet Another Setup Toolapache = “a patchy” serverapt = Advanced Packaging Toolar = archiveras = assemblerawk = “Aho Weiberger and Kernighan”三个作者的姓的第一个字母bash = Bourne Again SHellbc = Basic (Better) Calculatorbg = BackGroundbiff = 作者HeidiStettner在U.C.Berkely养的一条狗,喜欢对邮递员汪汪叫。cal = Calendar (日历)cat = Catenate (链接)cd = Change Directorychgrp = Change Groupchmod = Change Modechown = Change Ownerchsh = Change Shellcmp = comparecobra = Common Object Request BrokerArchitecturecomm = commoncp = Copycpio = CoPy In and Outcpp = C Pre Processorcron = Chronos 希腊文时间cups = Common Unix Printing Systemcvs = Current Version Systemdaemon = Disk And Execution MONitordc = Desk Calculatordd = Disk Dump (磁盘转储)df = Disk Freediff = Differencedmesg = diagnostic messagedu = Disk Usageed = editoregrep = Extended GREPelf = Extensible Linking Formatelm = ELectronic Mailemacs = Editor MACroSeval = EVALuateex = EXtendedexec = EXECute (执行)fd = file descriptorsfg = ForeGroundfgrep = Fixed GREPfmt = formatfsck = File System ChecKfstab = FileSystem TABlefvwm = F*** Virtual Window Managergawk = GNU AWKgpg = GNU Privacy Guardgroff = GNU troffhal = Hardware Abstraction Layerjoe = Joe’s Own Editorksh = Korn SHelllame = Lame Ain’t an MP3 Encoderlex = LEXical analyserlisp = LISt Processing = Lots of IrritatingSuperfluous Parenthesesln = Linklpr = Line PRintls = listlsof = LiSt Open Filesm4 = Macro processor Version 4man = MANual pagesmawk = Mike Brennan’s AWKmc = Midnight Commandermkfs = MaKe FileSystemmknod = Make Nodemotd = Message of The Daymozilla = MOsaic GodZILLamtab = Mount TABlemv = Movenano = Nano’s ANOther editornawk = New AWKnl = Number of Linesnm = namesnohup = No HangUPnroff = New ROFFod = Octal Dumppasswd = Passwdpg = pagerpico = PIne’s message COmposition editorpine = “Program for Internet News &amp;Email” = “Pine is not Elm”ping = 拟声 又 = Packet Internet Grouperpirntcap = PRINTer CAPabilitypopd = POP Directorypr = preprintf = Print Formattedps = Processes Statuspty = pseudo ttypushd = PUSH Directorypwd = Print Working Directoryrc = runcom = run command, rc还是plan9的shellrev = REVerserm = ReMovern = Read Newsroff = RunOFFrpm = RPM Package Manager = RedHat PackageManagerrsh, rlogin, rvim中的r = Remoterxvt = ouR XVTseamoneky = 我sed = Stream Editorseq = SEQuenceshar = Shell ARchiveslrn = S-Lang rnssh = Secure Shellssl = Secure Sockets Layerstty = Set TTYsu = Substitute Usersvn = SubVersiontar = Tape ARchivetcsh = TENEX C shelltee = T (T形水管接口)telnet = TEminaL over Networktermcap = terminal capabilityterminfo = terminal informationtex = τέχνη的缩写，希腊文arttr = traslatetroff = Typesetter new ROFFtsort = Topological SORTtty = TeleTypewritertwm = Tom’s Window Managertz = TimeZoneudev = Userspace DEVulimit = User’s LIMITumask = User’s MASKuniq = UNIQuei = VIsual = Very Inconvenientvim = Vi IMprovedwall = write allwc = Word Countwine = WINE Is Not an Emulatorxargs = eXtended ARGumentsxdm = X Display Managerxlfd = X Logical Font Descriptionxmms = X Multimedia Systemxrdb = X Resources DataBasexwd = X Window Dumpyacc = yet another compiler compilerFish = the Friendly Interactive SHellsu = Switch UserMIME = Multipurpose Internet Mail ExtensionsECMA = European Computer ManufacturersAssociation]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH工作原理]]></title>
    <url>%2F2019%2F08%2F08%2FSSH%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[SSH是一种安全的访问远程服务器的协议,远程管理工具. 对于SSH,我们需要知道几个密码学相关的概念 1.对称加密算法(DES)① Jack想要给Harry发送信息一个信息Ａ，为了安全起见，Jack使用一种加密算法，比如给信息通过加一个数字B得到一个新的数字C，然后以公开的方式发送给Harry ② Harry接受到数字C后，通过减去一个数字B得到最终的真正的信息A ③ Jack发送给Harry的信息A称为明文；加密后的信息C称为密文；加密用的B称之为密钥 ④ 加密算法（方法）可以很复杂，不一定是加和减，也可以是乘和除等等 ⑤ 以上过程中，加密和解密的秘钥是同一个密钥B 总结： ① 发送方使用密钥将明文数据加密成密文，然后发送出去 ② 接收方收到密文后，使用同一个密钥将密文解密成明文进行读取 2.非对称加密算法(RSA)① 首先Harry生成一对有相互关系的密钥对，比如e（公钥）和f（私钥）；其中公钥是可以公开给所有人的，私钥必须Harry本人私自留存，不得泄露。 ② 当Jack发送请求时，Harry会把自己的公钥e发送给Jack ③ Jack拿着Harry的公钥e通过一种加密算法将信息Ａ加密成密文Ｃ，以公开的方式发送给Harry ④ Harry收到密文Ｃ后，通过自己本地留存的私钥ｆ将密文解密成最终的信息A ⑤ 以上过程中，加密使用的是公钥e，解密使用的是私有f；使用不同的秘钥加解密 总结： ① 发送方使用接收方发送过来的公钥将明文数据加密成密文，然后发送出去 ② 接收方收到密文后，使用自己本地留存的私钥将密文解密成明文进行读取 对称加密 使用同一个密钥进行加密和解密，密钥容易泄露 加密速度快，效率高，数据传输速度快，安全性较低 非对称加密 使用不同的密钥（公钥和私钥）进行加密和解密 加密速度远远慢于对称加密，数据传输速度慢，安全性较高 SSH基于用户名密码认证① SSH客户端向SSH服务端发起一个登录请求 ② SSH服务端将自己的公钥发送给SSH客户端 注意：如果是第一次访问，则提示以下内容： [root@MissHou ~]# ssh 192.168.10.171 The authenticity of host ‘192.168.10.171 (192.168.10.171)’ can’t be established. //无法确认主机192.168.10.171的真实性 RSA key fingerprint is 9f:71:de:3c:86:25:dd:f0:06:78:ab:ba:96:5a:e4:95. Are you sure you want to continue connecting (yes/no)?yes 说明： 当客户端输入yes确认对方的公钥指纹后，server端的公钥就会被存放到客户机的用户家目录里 ~/.ssh/known_hosts文件中，下次再访问就直接通过密码登录，不需要再确认公钥。 ③ SSH客户端使用服务端发过来的公钥将自己的密码加密并且发送给SSH服务端 ④ SSH服务端收到SSH客户端发过来的加密密码后使用本地留存的私钥进行解密 ⑤ SSH服务端将解密出来的密码和/etc/shadow 文件里的用户密码对比认证 ⑥ SSH服务端认证成功，则返回登录成功结果，并发送一个随机会话口令给客户端，该口令用于后面两台主机进行数据传输的一个临时加密会话口令 SSH基于密钥对认证对比总结： ssh远程登录两种认证方式 基于用户名密码认证 用户身份认证（认证用户名和密码）使用非对称加密算法（安全） 数据传输使用对称加密算法（快） 要知道访问服务器用户的密码 基于密钥对的认证（免密码） 用户身份认证（比对用户公钥）使用非对称加密算法（安全） 数据传输使用对称加密算法（快） 事先要将用户的公钥远程拷贝到服务器端 五、SSH免密码登录配置 环境介绍 node1: 10.1.1.250 用户:code1 node2: 10.1.1.1 用户:code 实际需求 node1主机上的code1用户免密码以code用户身份访问node2主机 操作步骤 node1主机上的code1用户生成一对秘钥 [code1@node1 ~]$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/code1/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/code1/.ssh/id_rsa. Your public key has been saved in /home/code1/.ssh/id_rsa.pub. The key fingerprint is: 73:5b:dc:96:43:4a:37:b3:98:8f:c4:39:3b:9b:3d:87 code1@jumper The key’s randomart image is: +–[ RSA 2048]—-+ | | | | | . = | | + O = | | S . @ * | | o + * . | | . + .. | | =E .| | o .o | +—————–+ [code1@node1 ~]$ cd .ssh/ [code1@node1 .ssh]$ ll total 8 -rw——- 1 code1 coding 1671 Dec 30 21:44 id_rsa -rw-r–r– 1 code1 coding 394 Dec 30 21:44 id_rsa.pub node1上的code1用户将自己的公钥拷贝到node2端的code用户的家目录里 [code1@node1 .ssh]$ ssh-copy-id code@10.1.1.1 The authenticity of host ‘10.1.1.1 (10.1.1.1)’ can’t be established. RSA key fingerprint is 30:c8:1a:67:55:22:33:26:e5:fb:44:56:4d:8b:26:40. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added ‘10.1.1.1’ (RSA) to the list of known hosts. code@10.1.1.1‘s password: Now try logging into the machine, with “ssh ‘code@10.1.1.1’”, and check in: .ssh/authorized_keys to make sure we haven’t added extra keys that you weren’t expecting. 3.测试验证 1) 查看node2端的code用户家目录里的公钥存放文件 [code@node2 .ssh]$ cat authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEApBfeaTY1PYpCKzOzpQzUzzAUqFKLdWyHTX2d6p3nLC4wXvh80pXyD3PTXjx kDYjfBP9+3h4HUnm7FTNiAHy79cTnDnDhfbKlYQcm3k6N4lu6H8ffhnitV0Yavxw8wfSQxK/khUybNU52370H8c fFn+msWK7hOweEYoQzliplBPmVR6FVeM+PkIZtvvMCN9TFL87XL6C6HJkMqgmyLNNtI334cYwQq3W619Y8kLl9l 0/Vilp/WM97Akc/f1BkKIC4XveiRSVikzSM3Oh9gJV64rS2AdhtWeQN0DKGEYqX2OQTOdBmrIIZ4E7/NWWivesz 9OjFsLUGRaohcuB/tMhbnw== code1@node1 2) node1上的code1人员是否可以实现免密码登录node2 [code1@node1 ~]$ ssh code@10.1.1.1 Last login: Sat Dec 29 08:44:33 2018 from 10.1.1.250 [code@node2 ~]$ 总结： 客户端用户生成一对秘钥（公钥和私钥） 将自己的公钥拷贝到远程主机的某个用户下面——&gt;用户家目录里的authorized_keys 测试验证 相关文件解读 id_rsa：私钥 id_rsa.pub：公钥 authorized_keys：保存已授权的客户端公钥 known_hosts：保存已认证的远程主机公钥]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
